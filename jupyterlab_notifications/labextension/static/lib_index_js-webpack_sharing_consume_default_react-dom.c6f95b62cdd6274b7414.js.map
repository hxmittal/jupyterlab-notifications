{"version":3,"sources":["webpack://jupyterlab-notifications/./lib/card.js","webpack://jupyterlab-notifications/./lib/handler.js","webpack://jupyterlab-notifications/./lib/index.js","webpack://jupyterlab-notifications/./lib/notifications.js","webpack://jupyterlab-notifications/./lib/useStore.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAA0B;AAC4B;AACZ;AACoB;AACN;AACF;AACN;AACM;AACH;AACnD,kBAAkB,iEAAU;AAC5B;AACA;AACA,KAAK;AACL,CAAC;AACc;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,mDAAQ;AAClC;AACA;AACA,QAAQ,mDAAQ,EAAE,YAAY;AAC9B;AACA;AACA,YAAY,0DAAmB,CAAC,2DAAI,GAAG,0BAA0B;AACjE,QAAQ,0DAAmB,CAAC,qEAAc;AAC1C,YAAY,0DAAmB,CAAC,kEAAW;AAC3C,gBAAgB,0DAAmB,CAAC,iEAAU,GAAG,qDAAqD;AACtG,gBAAgB,0DAAmB,CAAC,iEAAU,GAAG,qFAAqF;AACtI,gBAAgB,0DAAmB,CAAC,iEAAU,GAAG,yBAAyB;AAC1E,oBAAoB,0DAAmB,CAAC,8DAAU,GAAG;AACrD;AACA;AACA;AACA,yBAAyB,UAAU,mBAAmB,EAAE;AACxD;;;;;;;;;;;;;;;;;;;;ACvC+C;AACS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACO,kDAAkD;AACzD;AACA,qBAAqB,+EAA6B;AAClD,uBAAuB,8DAAW;AAClC;AACA;AACA,yBAAyB,8EAA4B;AACrD;AACA;AACA,kBAAkB,+EAA6B;AAC/C;AACA;AACA;AACA,kBAAkB,gFAA8B;AAChD;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzB8C;AACK;AACJ;AACR;AACd;AACzB,WAAW,YAAY;AACgC;AACgB;AAClB;AACqC;AAC1F;AACA,WAAW,OAAO;AAClB,iBAAiB,oCAAK;AACtB;AACA;AACA;AACA,6BAA6B,+DAAa;AAC1C;AACA;AACA;AACA,uCAAuC,oDAAU;AACjD;AACA;AACA;AACA,oFAAoF,OAAO;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,kEAAkB;AAClC,gBAAgB,8DAAc;AAC9B;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe;AAC9B;AACA,4BAA4B,8DAAkB;AAC9C,2BAA2B,gEAAc,EAAE,UAAU;AACrD;AACA;AACA,4BAA4B,yEAAwB;AACpD,wCAAwC,YAAY;AACpD;AACA;AACA,QAAQ,kFAAgC;AACxC,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,aAAa;AAC7E;AACA;AACA,oBAAoB,8DAAc;AAClC;AACA;AACA;AACA;AACA,0GAA0G,qBAAqB;AAC/H;AACA,SAAS;AACT,KAAK;AACL;AACA,iEAAe,MAAM,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACxFY;AACc;AACtB;AACQ;AACiB;AAC5C;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,8BAA8B,kDAAQ;AACtC;AACA;AACA;AACA;AACA;AACA,iBAAiB,kEAAkE;AACnF;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,YAAY,0DAAmB;AAC/B,iCAAiC,0DAAmB,CAAC,0CAAY,GAAG,qDAAqD;AACzH,QAAQ,0DAAmB,YAAY,+BAA+B;AACtE;AACO;AACP;AACA;AACA,gBAAgB,mDAAQ;AACxB,IAAI,mDAAQ;AACZ,2BAA2B,sDAAsD;AACjF,KAAK;AACL;AACO,iCAAiC,6DAAW;AACnD;AACA;AACA;AACA;AACA,gBAAgB,0DAAmB;AACnC,YAAY,0DAAmB;AAC/B;AACA;;;;;;;;;;;;;;;;;;;;;AC3D4C;AACrC;AACP,UAAU,+DAA+D;AACzE;AACA;AACA,uBAAuB,uBAAuB;AACvC;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,2BAA2B;AAC3B;AACA;AACA,eAAe;AACf,IAAI;AACW;AACf,qBAAqB,+CAAQ;AAC7B;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA,KAAK;AACL;AACA","file":"lib_index_js-webpack_sharing_consume_default_react-dom.c6f95b62cdd6274b7414.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { setStore, getStore } from \"./useStore\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 345,\n    },\n});\nexport default function ImgMediaCard(props) {\n    const classes = useStyles();\n    let openUrl = () => {\n        const newWindow = window.open(\"https://jupyter.org/\", \"_blank\", \"noopener,noreferrer\");\n        if (newWindow)\n            newWindow.opener = null;\n    };\n    let triggerDelete = (id) => {\n        const store = [...getStore().ls];\n        let i = store.findIndex((task) => task.id === id);\n        store.splice(i, 1);\n        setStore({ ls: store });\n        console.log(\"This was triggered\");\n    };\n    return (React.createElement(Card, { className: classes.root },\n        React.createElement(CardActionArea, null,\n            React.createElement(CardContent, null,\n                React.createElement(Typography, { gutterBottom: true, variant: \"h5\", component: \"h2\" }, props.title),\n                React.createElement(Typography, { variant: \"body2\", color: \"textSecondary\", component: \"p\", onClick: () => openUrl() }, props.body),\n                React.createElement(IconButton, { \"aria-label\": \"delete\" },\n                    React.createElement(DeleteIcon, { onClick: (e) => {\n                            e.stopPropagation();\n                            e.preventDefault();\n                            triggerDelete(props.id);\n                        }, style: { top: 3, right: 3 } }))))));\n}\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @returns The response body interpreted as JSON\n */\nexport async function requestAPI(endPoint = '', init = {}) {\n    // Make request to Jupyter API\n    const settings = ServerConnection.makeSettings();\n    const requestUrl = URLExt.join(settings.baseUrl, 'notifications', endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    const data = await response.json();\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message);\n    }\n    return data;\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport * as Icons from \"@jupyterlab/ui-components\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport { requestAPI } from './handler';\nimport * as Y from \"yjs\";\n// import { YDocument } from \"@jupyterlab/shared-models\";\nimport { NotebookActions } from \"@jupyterlab/notebook\";\nimport { ICommandPalette, MainAreaWidget } from \"@jupyterlab/apputils\";\nimport { ToolbarButton } from \"@jupyterlab/apputils\";\nimport { systemNotification, notifyInCenter, notificationWidget, } from \"./notifications\";\n// import React from 'react';\n// import { List } from '@material-ui/core';\nconst ydoc = new Y.Doc();\nydoc.getArray(\"notif\").insert(0, [1, 2, 3]);\nclass ButtonExtension {\n    createNew(panel, context) {\n        const mybutton = new ToolbarButton({\n            label: \"Push Notif\",\n            onClick: async () => {\n                try {\n                    const data = await requestAPI('');\n                    console.log(data);\n                }\n                catch (reason) {\n                    console.error(`Error on GET /jlab-ext-example/notifications.\\n${reason}`);\n                }\n                const yarray = ydoc.getArray(\"notif\");\n                console.log(yarray.toArray(), \"yjs print\");\n                ydoc.getArray(\"notif\").insert(0, [6, 7, 8]);\n                console.log(ydoc.getArray(\"notif\").toArray(), \"print2\");\n                const notification = {\n                    title: \"Button Press\",\n                    body: \"Button in Notebook has been pressed!\",\n                    url: \"url\",\n                };\n                systemNotification(notification);\n                notifyInCenter(notification);\n                document.addEventListener(\"DOMContentLoaded\", () => {\n                    if (Notification.permission !== \"granted\") {\n                        Notification.requestPermission();\n                    }\n                });\n            },\n        });\n        // Add the toolbar button to the notebook toolbar\n        panel.toolbar.insertItem(10, \"mybutton\", mybutton);\n        return mybutton;\n    }\n}\n/**\n * Initialization data for the jupyterlab-todo extension.\n */\nconst plugin = {\n    id: \"jupyterlab-todo:plugin\",\n    autoStart: true,\n    requires: [ICommandPalette],\n    activate: async (app, palette) => {\n        const content = new notificationWidget();\n        const widget = new MainAreaWidget({ content });\n        widget.id = \"apod-jupyterlab\";\n        widget.title.closable = true;\n        widget.title.icon = Icons.jupyterFaviconIcon;\n        app.shell.add(widget, \"right\", { rank: 500 });\n        const your_button = new ButtonExtension();\n        app.docRegistry.addWidgetExtension(\"Notebook\", your_button);\n        NotebookActions.executed.connect((_, args) => {\n            const { cell, notebook } = args;\n            const codeCell = cell.model.type === \"code\";\n            const nonEmptyCell = cell.model.value.text.length > 0;\n            const metadata = cell.model.metadata;\n            if (codeCell && nonEmptyCell) {\n                if (metadata.has(\"execution\")) {\n                    const notebookName = notebook.title.label.replace(/\\.[^/.]+$/, \"\");\n                    const notification = {\n                        title: \"Cell Execution!\",\n                        body: `Cell has finished executing in ${notebookName}.ipynb!`,\n                        url: \"www.google.com\",\n                    };\n                    notifyInCenter(notification);\n                }\n            }\n            else {\n                alert(\"Notebook Cell Timing needs to be enabled for Jupyterlab Notifications to work. \" +\n                    'Please go to Settings -> Advanced Settings Editor -> Notebook and update setting to {\"recordTiming\": true}');\n            }\n        });\n    },\n};\nexport default plugin;\n","import useStore from \"./useStore\";\nimport { setStore, getStore } from \"./useStore\";\nimport React from \"react\";\nimport ImgMediaCard from \"./card\";\nimport { ReactWidget } from \"@jupyterlab/apputils\";\nexport function systemNotification(notification) {\n    if (Notification.permission !== \"granted\") {\n        Notification.requestPermission();\n    }\n    else {\n        const notificationObj = new Notification(notification.title, {\n            icon: \"http://Your_Website.com/logo.png\",\n            body: notification.body,\n        });\n        /* Remove the notification from Notification Center when clicked.*/\n        notificationObj.onclick = function () {\n            window.open(notification.url);\n        };\n        /* Callback function when the notification is closed. */\n        notificationObj.onclose = function () {\n            console.log(\"Notification closed\");\n        };\n    }\n}\nexport function NotificationCenter(props) {\n    const [store, setStore] = useStore();\n    let handleClick = () => {\n        console.log(store);\n        setStore({\n            ls: [\n                ...store.ls,\n                { title: \"newElement\", body: \"newBody\", id: Date.now().toString() },\n            ],\n        });\n        // const yarray = ydoc.getArray('notif')\n        // console.log(yarray.toArray(), \"yjs print\");\n        // ydoc.getArray('notif').insert(0, [6,7,8]);\n        // console.log(ydoc.getArray('notif').toArray(), \"print2\");\n    };\n    return (React.createElement(\"div\", null,\n        store.ls.map((notif) => (React.createElement(ImgMediaCard, { title: notif.title, body: notif.body, id: notif.id }))),\n        React.createElement(\"button\", { onClick: () => handleClick() }, \"Activat Lasers\")));\n}\nexport function notifyInCenter(notification) {\n    const title = notification.title;\n    const body = notification.body;\n    let store = getStore();\n    setStore({\n        ls: [...store.ls, { title: title, body: body, id: Date.now().toString() }],\n    });\n}\nexport class notificationWidget extends ReactWidget {\n    constructor() {\n        super();\n    }\n    render() {\n        return (React.createElement(\"div\", null,\n            React.createElement(NotificationCenter, null)));\n    }\n}\n","import { useState, useEffect } from \"react\";\nexport let store = {\n    ls: [{ title: \"card1.0\", body: \"body1.0\", id: Date.now().toString() }],\n};\nlet listeners = [];\n// setStore(store => ({...store, isFoo: false}))\nexport function setStore(val) {\n    if (typeof val === \"object\" && val !== null) {\n        store = val;\n    }\n    else {\n        store = val(store);\n    }\n    store = val;\n    listeners.forEach((l) => l(val));\n}\nexport function getStore() {\n    return Object.assign({}, store);\n}\n// setStore(store => {\n//     return {...store }\n// })\nexport default function useStore() {\n    const listener = useState()[1];\n    var ezYpZ = 5;\n    console.log(ezYpZ);\n    useEffect(() => {\n        listeners.push(listener);\n        return () => void (listeners = listeners.filter((l) => l === listener));\n    }, []);\n    return [store, setStore];\n}\n"],"sourceRoot":""}