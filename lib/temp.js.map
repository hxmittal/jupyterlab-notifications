{"version":3,"file":"temp.js","sourceRoot":"","sources":["../src/temp.tsx"],"names":[],"mappings":"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","sourcesContent":["// import React, { useState } from \"react\";\n// import { makeStyles } from \"@material-ui/core/styles\";\n// import Accordion from \"@material-ui/core/Accordion\";\n// import Checkbox from \"@material-ui/core/Checkbox\";\n// import FormControlLabel from \"@material-ui/core/FormControlLabel\";\n// import Box from \"@material-ui/core/Box\";\n// import AccordionSummary from \"@material-ui/core/AccordionSummary\";\n// import AccordionDetails from \"@material-ui/core/AccordionDetails\";\n// import Typography from \"@material-ui/core/Typography\";\n// import ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\n// const useStyles = makeStyles(() => ({\n//   root: {\n//     width: \"100%\",\n//   },\n//   expanded: {},\n//   content: {\n//     \"&$expanded\": {\n//       marginBottom: 0,\n//     },\n//   },\n// }));\n\n// //TODO: decouple elements of the TODO center, consider using something else than Material UI accordion\n// export function TodoCenter() {\n//   let [taskTextInput, setTaskText] = useState(\"\");\n//   let [subtaskTextInput, setSubtaskText] = useState(\"\");\n//   let [tasks, setTasks] = useState([]);\n\n//   const classes = useStyles();\n\n//   let handleTaskChange = (e) => {\n//     setTaskText(e.target.value);\n//   };\n\n//   let handleSubtaskChange = (e) => {\n//     setSubtaskText(e.target.value);\n//   };\n\n//   let handleTaskSubmit = (e) => {\n//     e.preventDefault();\n//     setTasks([\n//       ...tasks,\n//       {\n//         task: taskTextInput,\n//         id: Date.now(),\n//         subtasks: [],\n//         done: false,\n//       },\n//     ]);\n//     e.target.reset();\n//   };\n\n//   let handleSubtaskSubmit = (e) => {\n//     e.preventDefault();\n//     let curTasks = [...tasks];\n//     let i = curTasks.findIndex((task) => task.id === parseInt(e.target.id));\n//     curTasks[i].subtasks.push({\n//       subtask: subtaskTextInput,\n//       id: Date.now(),\n//       parentId: curTasks[i].id,\n//       done: false,\n//     });\n//     setTasks(curTasks);\n//     e.target.reset();\n//   };\n\n//   //TODO: abstract changing value on the object into separate function\n//   let toggleTask = (e) => {\n//     let curTasks = [...tasks];\n//     let i = curTasks.findIndex((task) => task.id === parseInt(e.target.id));\n//     curTasks[i].done = !curTasks[i].done;\n//     if (curTasks[i].done) {\n//       let t = curTasks.splice(i, 1);\n//       t[0].subtasks.map(function (subtask) {\n//         subtask.done = true;\n//         return subtask;\n//       });\n//       curTasks.push(t[0]);\n//     }\n//     setTasks(curTasks);\n//   };\n\n//   let toggleSubtask = (e) => {\n//     let curTasks = [...tasks];\n//     let i = curTasks.findIndex(\n//       (task) => task.id === parseInt(e.target.id.split(\"-\")[0])\n//     ); //parent id\n//     let curSubtasks = [...curTasks[i].subtasks];\n//     let j = curSubtasks.findIndex(\n//       (subtask) => subtask.id === parseInt(e.target.id.split(\"-\")[1])\n//     ); //id\n//     curSubtasks[j].done = !curSubtasks[j].done;\n//     if (curSubtasks[j].done) {\n//       let t = curSubtasks.splice(j, 1);\n//       curSubtasks.push(t[0]);\n//     }\n//     curTasks[i].subtasks = curSubtasks;\n//     setTasks(curTasks);\n//   };\n\n//   return (\n//     <div>\n//       <div>\n//         {tasks.map((task) => (\n//           <div className={classes.root}>\n//             {/* bool defaultExpanded below controls default state of accordion */}\n//             <Accordion defaultExpanded={true} elevation={0} key={task.id}>\n//               <AccordionSummary\n//                 classes={{\n//                   content: classes.content,\n//                   expanded: classes.expanded,\n//                 }}\n//                 expandIcon={<ExpandMoreIcon />}\n//                 aria-label=\"Expand\"\n//                 aria-controls=\"additional-actions1-content\"\n//                 id=\"additional-actions1-header\"\n//               >\n//                 <FormControlLabel\n//                   aria-label=\"Acknowledge\"\n//                   onClick={(event) => event.stopPropagation()}\n//                   onFocus={(event) => event.stopPropagation()}\n//                   control={\n//                     <Checkbox\n//                       checked={task.done}\n//                       id={task.id}\n//                       onChange={toggleTask}\n//                     />\n//                   }\n//                   label={\n//                     <div\n//                       style={{\n//                         textDecoration: task.done ? \"line-through\" : \"none\",\n//                         color: task.done ? \"grey\" : \"black\",\n//                       }}\n//                     >\n//                       {task.task}\n//                     </div>\n//                   }\n//                 />\n//               </AccordionSummary>\n//               <AccordionDetails>\n//                 <Typography color=\"textSecondary\" component={\"span\"}>\n//                   <Box pl={4}>\n//                     {task.subtasks.map((subtask) => (\n//                       <div className={classes.root}>\n//                         <Accordion defaultExpanded={false} elevation={0}>\n//                           <FormControlLabel\n//                             aria-label=\"Acknowledge\"\n//                             onClick={(event) => event.stopPropagation()}\n//                             onFocus={(event) => event.stopPropagation()}\n//                             control={\n//                               <Checkbox\n//                                 checked={subtask.done}\n//                                 id={\"\" + subtask.parentId + \"-\" + subtask.id}\n//                                 onChange={toggleSubtask}\n//                               />\n//                             }\n//                             label={\n//                               <div\n//                                 style={{\n//                                   textDecoration: subtask.done\n//                                     ? \"line-through\"\n//                                     : \"none\",\n//                                   color: subtask.done ? \"grey\" : \"black\",\n//                                 }}\n//                               >\n//                                 {subtask.subtask}\n//                               </div>\n//                             }\n//                           />\n//                         </Accordion>\n//                       </div>\n//                     ))}\n//                     <div>\n//                       <form\n//                         method=\"post\"\n//                         id={task.id}\n//                         onSubmit={handleSubtaskSubmit}\n//                       >\n//                         <input\n//                           type=\"text\"\n//                           placeholder=\"+ Add Subtask\"\n//                           onChange={handleSubtaskChange}\n//                         />\n//                       </form>\n//                     </div>\n//                   </Box>\n//                 </Typography>\n//               </AccordionDetails>\n//             </Accordion>\n//           </div>\n//         ))}\n//       </div>\n//       <div>\n//         <form method=\"post\" onSubmit={handleTaskSubmit}>\n//           <input\n//             type=\"text\"\n//             placeholder=\"+ Add Task\"\n//             onChange={handleTaskChange}\n//           />\n//           {/* <OutlinedTextField /> */}\n//           {/* <button type=\"submit\">+ Add Task</button> */}\n//         </form>\n//       </div>\n//     </div>\n//   );\n// }\n"]}