{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  JupyterFrontEnd,\r\n  JupyterFrontEndPlugin,\r\n} from \"@jupyterlab/application\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport { Widget } from \"@lumino/widgets\";\r\nimport * as Icons from \"@jupyterlab/ui-components\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"../style/main.css\";\r\n\r\n// import { YDocument } from \"@jupyterlab/shared-models\";\r\nimport { NotebookActions } from \"@jupyterlab/notebook\";\r\nimport { ICommandPalette, MainAreaWidget } from \"@jupyterlab/apputils\";\r\nimport { ToolbarButton } from \"@jupyterlab/apputils\";\r\nimport { DocumentRegistry } from \"@jupyterlab/docregistry\";\r\nimport { INotebookModel, NotebookPanel } from \"@jupyterlab/notebook\";\r\nimport { IDisposable } from \"@lumino/disposable\";\r\n//import { requestAPI } from './handler';\r\nimport { requestAPI } from \"./handler\";\r\nimport {\r\n  // systemNotification,\r\n  notifyInCenter,\r\n  notificationWidget,\r\n} from \"./notifications\";\r\n\r\n// import React from 'react';\r\n\r\n// import { List } from '@material-ui/core';\r\n\r\nconst ignoreNotifs = new Map();\r\n\r\nclass ButtonExtension\r\n  implements DocumentRegistry.IWidgetExtension<NotebookPanel, INotebookModel>\r\n{\r\n  createNew(\r\n    panel: NotebookPanel,\r\n    context: DocumentRegistry.IContext<INotebookModel>\r\n  ): IDisposable {\r\n    const mybutton = new ToolbarButton({\r\n      label: \"Push Notif\",\r\n      onClick: async () => {\r\n        const dataToSend = {\r\n          INotificationEvent: {\r\n            origin: \"google\",\r\n            Title: Math.random().toString(),\r\n            Body: \"this is notif\",\r\n            LinkURL: \"google.com\",\r\n            Ephemeral: true,\r\n            NotifTimeout: 18,\r\n            NotifType: \"web\",\r\n          },\r\n        };\r\n        try {\r\n          const reply = await requestAPI<any>(\"notifications\", {\r\n            body: JSON.stringify(dataToSend),\r\n            method: \"POST\",\r\n          });\r\n          console.log(reply);\r\n          ignoreNotifs.set(reply[\"RowId\"], null);\r\n          console.log(\"this was invoked\");\r\n        } catch (reason) {\r\n          console.error(\r\n            `Error on POST /jlab-ext-example/hello ${dataToSend}.\\n${reason}`\r\n          );\r\n        }\r\n        document.addEventListener(\"DOMContentLoaded\", () => {\r\n          if (Notification.permission !== \"granted\") {\r\n            Notification.requestPermission();\r\n          }\r\n        });\r\n      },\r\n    });\r\n\r\n    // Add the toolbar button to the notebook toolbar\r\n    panel.toolbar.insertItem(10, \"mybutton\", mybutton);\r\n\r\n    return mybutton;\r\n  }\r\n}\r\n\r\n/**\r\n * Initialization data for the jupyterlab-todo extension.\r\n */\r\nconst plugin: JupyterFrontEndPlugin<void> = {\r\n  id: \"jupyterlab-todo:plugin\",\r\n  autoStart: true,\r\n  requires: [ICommandPalette],\r\n\r\n  activate: async (app: JupyterFrontEnd, palette: ICommandPalette) => {\r\n    // console.log('Attempting GET');\r\n    // // GET request\r\n    // try {\r\n    //   const data = await requestAPI<any>('hello');\r\n    //   console.log(data);\r\n    // } catch (reason) {\r\n    //   console.error(`Error on GET /jlab-ext-example/hello.\\n${reason}`);\r\n    // }\r\n    let ws = new WebSocket(\"ws://localhost:8888/api/ws\");\r\n    ws.onopen = function () {\r\n      ws.send(\"Hello, world\");\r\n    };\r\n    ws.onmessage = async function (rowId) {\r\n      try {\r\n        console.log(rowId.data);\r\n        console.log(\"this was also invoked\");\r\n        console.log(ignoreNotifs);\r\n        if (!ignoreNotifs.has(rowId.data)) {\r\n          const data = await requestAPI<any>(\"notifications/\" + rowId.data);\r\n          // console.log(data);\r\n          const ls = data[\"Response\"];\r\n          // console.log(ls);\r\n          const notification = {\r\n            title: ls[\"INotificationResponse\"][\"title\"],\r\n            body: ls[\"INotificationResponse\"][\"body\"],\r\n            url: ls[\"INotificationResponse\"][\"linkURL\"],\r\n          };\r\n          // systemNotification(notification);\r\n          notifyInCenter(notification);\r\n        }\r\n      } catch (reason) {\r\n        console.error(\r\n          `Error on GET /jlab-ext-example/notifications.\\n${reason}`\r\n        );\r\n      }\r\n    };\r\n\r\n    const content: Widget = new notificationWidget();\r\n    const widget = new MainAreaWidget({ content });\r\n    widget.id = \"apod-jupyterlab\";\r\n    widget.title.closable = true;\r\n    widget.title.icon = Icons.jupyterFaviconIcon;\r\n    app.shell.add(widget, \"right\", { rank: 500 });\r\n    const your_button = new ButtonExtension();\r\n    app.docRegistry.addWidgetExtension(\"Notebook\", your_button);\r\n    NotebookActions.executed.connect((_, args) => {\r\n      const { cell, notebook } = args;\r\n      const codeCell = cell.model.type === \"code\";\r\n      const nonEmptyCell = cell.model.value.text.length > 0;\r\n      const metadata = cell.model.metadata;\r\n      if (codeCell && nonEmptyCell) {\r\n        if (metadata.has(\"execution\")) {\r\n          const notebookName = notebook.title.label.replace(/\\.[^/.]+$/, \"\");\r\n          const notification = {\r\n            title: \"Cell Execution!\",\r\n            body: `Cell has finished executing in ${notebookName}.ipynb!`,\r\n            url: \"www.google.com\",\r\n          };\r\n          notifyInCenter(notification);\r\n        }\r\n      } else {\r\n        alert(\r\n          \"Notebook Cell Timing needs to be enabled for Jupyterlab Notifications to work. \" +\r\n            'Please go to Settings -> Advanced Settings Editor -> Notebook and update setting to {\"recordTiming\": true}'\r\n        );\r\n      }\r\n    });\r\n  },\r\n};\r\n\r\nexport default plugin;\r\n"]}